group 'com.wangshibiao.spring'
//version '1.0-SNAPSHOT'
version '1.0-RELEASE'

apply plugin: 'idea'
apply plugin: 'eclipse'


apply from: 'dependencyDefinitions.gradle'

ext {
    //模块名
    moduleName = "springProjects";
//    version "1.0-SNAPSHOT"
    version "1.0-RELEASE"
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'signing' //使用signing plugin做数字签名

    group = 'com.wangshibiao.spring'

    // java编译的时候缺省状态下会因为中文字符而失败
    // 所以这儿需要改为utf8
    //
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    ext {
        buildDir "../out/build/${project.name}"

    }
//
//    jar {
//        manifest.mainAttributes(
//                "Built-By": System.properties['user.name'],
//                "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
//                "Implementation-Title": "jsmth",
//                "Implementation-Version": ${version},
//                "Implementation-Vendor": 'jsmth.org')
//    }

    configurations {
        deployerJars
    }


    repositories {
        mavenLocal()
        maven {
            name 'aliyun'
            url "http://maven.aliyun.com/nexus/content/groups/public"
        }
        jcenter()
        maven {
            name 'Nexus Private Library'
            url "http://10.96.15.73/repository/maven-public"
        }
/*        maven {
            name 'osc'
            url "http://maven.oschina.net/content/groups/public/"
            artifactUrls "http://maven.oschina.net/content/repositories/thirdparty/"
        }
        maven {
            name 'thirdparty'
            url "http://maven.oschina.net/content/repositories/thirdparty/"
        }
        maven {
            name 'Spring Maven RELEASE Repository'
            url "http://repo.springframework.org/release"
        }
        maven {
           name 'Spring Maven libs-release Repository'
            url "http://repo.springframework.org/libs-release"
        }
        maven {
            name 'Spring Maven SNAPSHOT Repository'
            url "http://repo.springframework.org/libs-snapshot"
       }
       mavenCentral()*/
    }


    test{
        exclude '**'
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.compilerArgs += "-parameters"
    }

    dependencies {
        compile(
                lib.'slf4j-api',
                lib.'slf4j-log4j12',
                lib.'log4j',
        )
        testCompile lib.'junit'
        deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
    }

    version = '1.0'

    jar {
        manifest.attributes provider: 'gradle'
        manifest.attributes["Created-By"] =
                "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
        manifest.attributes["Implementation-Title"] = project.name
        manifest.attributes["Implementation-Version"] = project.version

        from("${rootProject.projectDir}/src/dist") {
            include "license.txt"
            include "notice.txt"
            into "META-INF"
            expand(copyright: new Date().format("yyyy"), version: project.version)
        }
    }

//create a single Jar with all dependencies
    task createSingleJarWithDependencies(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'Gradle Jar File Example',
                    'Implementation-Version': version,
                    'Main-Class': 'com.mkyong.DateUtils'
        }
        baseName = project.name + '-dependicies'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
        destinationDir = file("${buildDir}/jar/")
        rename('classes.jar', "${project.name}-${version}-dependicies.jar")
    }

    task doCopyClassResourceFiles(type: Copy, dependsOn: compileJava){
        from 'src/main/java/'
        into "${buildDir}/classes/main/"
        exclude '**/*.java'
    }
    task doBuildProjectPom << {
        pom {
            project {
                inceptionYear '2016'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo("$buildDir/pom/pom.xml")
    }

    task doCopyProjectPomToJar(type: Copy,dependsOn: doBuildProjectPom) {
        from "$buildDir/pom/pom.xml"
        into "${buildDir}/../jar"
        rename { String fileName ->
            fileName.replace('pom.xml', "${project.name}-${version}.pom")
        }
    }

    //依赖编译，然后打包JAR
    task buildProjectToJar(type:Jar, dependsOn: [compileJava,doCopyClassResourceFiles,doBuildProjectPom,doCopyProjectPomToJar]) {
        from "${buildDir}/classes/main"
        destinationDir = file("${buildDir}/../jar/")
        rename('classes.jar',"${project.name}-${version}.jar")
    }


    task autobuild(type: Copy, dependsOn: build) {
        from configurations.runtime
        into "${buildDir}/dependicies" // 目标位置
    }

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "scp://repos.mycompany.com/releases") {
                authentication(userName: "me", password: "myPassword")
            }
        }
    }

    //清除上次的编译过的文件
    task clearProject(type:Delete){
        println( "${buildDir}")
        delete "${buildDir}"
        println("delete done.")
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "${buildDir}/myRepo/")
            }
        }
    }
}

/**
 * 发布scala的jar到maven仓库的命令：
 * gradle clean scala:jar scala:publish
 */
configure(subprojects.findAll() { it.name == 'scala' }){
    apply plugin: 'maven-publish'
    publishing {
        publications {
            maven(MavenPublication) {
                println "groupId:"+groupId+" artifactId:"+artifactId+" version:"+version
                from components.java
            }
        }
    }

    publishing {
        repositories {
            maven {
                credentials {
                    username 'admin'
                    password 'admin123'
                }
                url "http://10.96.15.73/repository/maven-releases/"
            }
        }
    }
}


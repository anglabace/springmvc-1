group 'com.wangshibiao.spring'
version '1.0-SNAPSHOT'

apply plugin: 'idea'
apply plugin: 'eclipse'


apply from: 'dependencyDefinitions.gradle'

ext {
    //模块名
    moduleName = "resourceexplorer";
    version "1.0-SNAPSHOT"
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'signing' //使用signing plugin做数字签名

    group = 'cn.com.open.resourceexplorer'

    // java编译的时候缺省状态下会因为中文字符而失败
    // 所以这儿需要改为utf8
    //
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    ext {
        buildDir "../out/build/${project.name}"

    }
//
//    jar {
//        manifest.mainAttributes(
//                "Built-By": System.properties['user.name'],
//                "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
//                "Implementation-Title": "jsmth",
//                "Implementation-Version": ${version},
//                "Implementation-Vendor": 'jsmth.org')
//    }

    configurations {
        deployerJars
    }


    repositories {
        mavenLocal()
        maven {
            name 'aliyun'
            url "http://maven.aliyun.com/nexus/content/groups/public"
        }
        jcenter()
/*        maven {
            name 'open'
            url "http://maven.open.com.cn/repository/maven-public/"
        }*/

//        maven {
//            name 'osc'
//            url "http://maven.oschina.net/content/groups/public/"
//            artifactUrls "http://maven.oschina.net/content/repositories/thirdparty/"
//        }
//        maven {
//            name 'thirdparty'
//            url "http://maven.oschina.net/content/repositories/thirdparty/"
//        }
//        maven {
//            name 'Spring Maven RELEASE Repository'
//            url "http://repo.springframework.org/release"
//        }
//        maven {
//           name 'Spring Maven libs-release Repository'
//            url "http://repo.springframework.org/libs-release"
//        }
//        maven {
//            name 'Spring Maven SNAPSHOT Repository'
//            url "http://repo.springframework.org/libs-snapshot"
//       }

        //Maven中心库(http://repo1.maven.org/maven2)
//            mavenCentral()
    }


    test{
        exclude '**'
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.compilerArgs += "-parameters"
    }

    dependencies {
        compile(
                lib.'slf4j-api',
                lib.'slf4j-log4j12',
                lib.'log4j',
//                lib.'mavenAntTasks'
        )
        testCompile lib.'junit'
        deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
    }

//    sourceSets {
//        main {
//            java {
//                srcDir 'src/main/java'
//            }
//            resources {
//                srcDir 'src/main/resources'
//            }
//
//
//        }
//        test {
//            java {
//                srcDir 'src/test/java'
//            }
//            resources {
//                srcDir 'src/test/resources'
//            }
//        }
//    }

    version = '1.0'

    jar {
        manifest.attributes provider: 'gradle'
        manifest.attributes["Created-By"] =
                "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
        manifest.attributes["Implementation-Title"] = project.name
        manifest.attributes["Implementation-Version"] = project.version

        from("${rootProject.projectDir}/src/dist") {
            include "license.txt"
            include "notice.txt"
            into "META-INF"
            expand(copyright: new Date().format("yyyy"), version: project.version)
        }
    }

//create a single Jar with all dependencies
    task createSingleJarWithDependencies(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'Gradle Jar File Example',
                    'Implementation-Version': version,
                    'Main-Class': 'com.mkyong.DateUtils'
        }
        baseName = project.name + '-dependicies'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
        destinationDir = file("${buildDir}/jar/")
        rename('classes.jar', "${project.name}-${version}-dependicies.jar")
    }

    task doCopyClassResourceFiles(type: Copy, dependsOn: compileJava){
        from 'src/main/java/'
        into "${buildDir}/classes/main/"
        exclude '**/*.java'
    }
    task doBuildProjectPom << {
        pom {
            project {
                inceptionYear '2016'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo("$buildDir/pom/pom.xml")
    }
//    task doGeneratorMavenMetaInfoPom << {
//        pom {
//            project {
//                inceptionYear '2016'
//                licenses {
//                    license {
//                        name 'The Apache Software License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                        distribution 'repo'
//                    }
//                }
//            }
//        }.writeTo("$buildDir/jar/pom.xml")
//    }

    task doCopyProjectPomToJar(type: Copy,dependsOn: doBuildProjectPom) {
        from "$buildDir/pom/pom.xml"
        into "${buildDir}/../jar"
        rename { String fileName ->
            fileName.replace('pom.xml', "${project.name}-${version}.pom")
        }
    }

//    task copyLicense(type: Copy) {
//        from "LICENSE"
//        into "$buildDir"
//    }

//    build.doLast{
//        println 'copy resources...'
////        from 'src/main/java/'
////        into "${buildDir}/classes/main/"
////        exclude '**/*.java'
//    }

//    compileJava.doLast{
//        println 'generator pom.xml...'
//        pom {
//            project {
//                inceptionYear '2016'
//                licenses {
//                    license {
//                        name 'The Apache Software License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                        distribution 'repo'
//                    }
//                }
//            }
//        }.writeTo("$buildDir/jar/pom.xml")
//
//    }



    //依赖编译，然后打包JAR
    task buildProjectToJar(type:Jar, dependsOn: [compileJava,doCopyClassResourceFiles,doBuildProjectPom,doCopyProjectPomToJar]) {
        from "${buildDir}/classes/main"
        destinationDir = file("${buildDir}/../jar/")
        rename('classes.jar',"${project.name}-${version}.jar")
    }


    task autobuild(type: Copy, dependsOn: build) {
        from configurations.runtime
        into "${buildDir}/dependicies" // 目标位置
    }

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
//            repository(url: "scp://repos.mycompany.com/releases") {
//                authentication(userName: "me", password: "myPassword")
//            }
            repository(url: "scp://repos.mycompany.com/releases") {
                authentication(userName: "me", password: "myPassword")
            }
        }
    }

    //清除上次的编译过的文件
    task clearProject(type:Delete){
//        delete 'build','target'
        println( "${buildDir}")
        delete "${buildDir}"
        println("delete done.")
    }

    uploadArchives {
        repositories {
//            flatDir {
//                dirs 'repos'
//            }
            mavenDeployer {
                repository(url: "${buildDir}/myRepo/")
            }
        }
    }


//    //把JAR复制到目标目录
//    task release(type: Copy,dependsOn: [clearProject,buildProjectToJar]) {
//        from('build/libs') {
//            include '*.jar'
//        }
//        into ('target')
//    }

//    configurations {
//        mavenAntTasks
//    }
////    dependencies {
////        mavenAntTasks 'org.apache.maven:maven-ant-tasks:2.1.1'
////    }
//    task uploadArchives(dependsOn:project.tasks.withType(PublishToMavenLocal)) << {
//        def antBuilder = services.get(IsolatedAntBuilder)
//        def rootDir = project.parent.projectDir
//        antBuilder.withClasspath(configurations.mavenAntTasks).execute {
//            taskdef(resource: 'org/apache/maven/artifact/ant/antlib.xml')
//            def isSnapshot = version.endsWith("-SNAPSHOT")
//            def url = isSnapshot ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
//            def repoId = isSnapshot ? "sonatype-nexus-snapshots" : "sonatype-nexus-staging"
//            mvn {
//                arg value:"org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"
//                arg value:"-Dgpg.homedir=${rootDir.absolutePath}"
//                arg value:"-Dgpg.keyname=${System.getenv("SIGNING_KEY")}"
//                arg value:"-Dgpg.passphrase=${System.getenv("SIGNING_PASSWORD")}"
//                arg value:"-Durl=${url}"
//                arg value:"-DrepositoryId=${repoId}"
//                arg value:"-DpomFile=${buildDir}/publications/maven/pom-default.xml"
//                arg value:"-Dfile=${buildDir}/publications/maven/pom-default.xml"
//                arg value:"-Pgpg"
//            }
//        }
//    }
//    publishing {
//        repositories {
//            maven {
//                credentials {
//                    def u = System.getenv("ARTIFACTORY_USERNAME") ?: project.hasProperty("artifactoryPublishUsername") ? project.artifactoryPublishUsername : ''
//                    def p = System.getenv("ARTIFACTORY_PASSWORD") ?: project.hasProperty("artifactoryPublishPassword") ? project.artifactoryPublishPassword : ''
//                    username = u
//                    password = p
//                }
//                if (isBuildSnapshot) {
//                    url "https://repo.grails.org/grails/libs-snapshots-local"
//                } else {
//                    url "https://repo.grails.org/grails/libs-releases-local"
//                }
//            }
//        }
//    }
}
//
//task dd(){
//    depthCompare(thisObject)
//    taskJar()
//}
//
////依赖编译，然后打包JAR
//task taskJar(type: Jar) {
//    from "${buildDir}/classes"
//    destinationDir = file("${buildDir}/jar/")
//    rename('classes.jar', "${project.name}-${version}.jar")
//}

//
////依赖编译，然后打包JAR
//task taskJar(type:Jar, dependsOn: compileJava) {
//    from 'build/classes'
//    destinationDir = file('build/libs')
//}
//
////清除上次的编译过的文件
//task clearPj(type:Delete){
//    delete 'build','target'
//}
//
//
////把JAR复制到目标目录
//task release(type: Copy,dependsOn: [clearPj,taskJar]) {
//    from('build/libs') {
//        include '*.jar'
//    }
//    into ('target')
//}


